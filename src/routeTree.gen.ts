/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as PrivacyPolicyImport } from "./routes/privacy-policy";
import { Route as AnalysisNlpImport } from "./routes/analysis/nlp";

// Create Virtual Routes

const StatementsLazyImport = createFileRoute("/statements")();
const HelpLazyImport = createFileRoute("/help")();
const ConnectionsLazyImport = createFileRoute("/connections")();
const ConflictsLazyImport = createFileRoute("/conflicts")();
const IndexLazyImport = createFileRoute("/")();
const NetworkStatementLazyImport = createFileRoute("/network/statement")();
const NetworkCompLazyImport = createFileRoute("/network/comp")();

// Create/Update Routes

const StatementsLazyRoute = StatementsLazyImport.update({
  id: "/statements",
  path: "/statements",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/statements.lazy").then((d) => d.Route));

const HelpLazyRoute = HelpLazyImport.update({
  id: "/help",
  path: "/help",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/help.lazy").then((d) => d.Route));

const ConnectionsLazyRoute = ConnectionsLazyImport.update({
  id: "/connections",
  path: "/connections",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/connections.lazy").then((d) => d.Route));

const ConflictsLazyRoute = ConflictsLazyImport.update({
  id: "/conflicts",
  path: "/conflicts",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/conflicts.lazy").then((d) => d.Route));

const PrivacyPolicyRoute = PrivacyPolicyImport.update({
  id: "/privacy-policy",
  path: "/privacy-policy",
  getParentRoute: () => rootRoute,
} as any);

const IndexLazyRoute = IndexLazyImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route));

const NetworkStatementLazyRoute = NetworkStatementLazyImport.update({
  id: "/network/statement",
  path: "/network/statement",
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import("./routes/network/statement.lazy").then((d) => d.Route),
);

const NetworkCompLazyRoute = NetworkCompLazyImport.update({
  id: "/network/comp",
  path: "/network/comp",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/network/comp.lazy").then((d) => d.Route));

const AnalysisNlpRoute = AnalysisNlpImport.update({
  id: "/analysis/nlp",
  path: "/analysis/nlp",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/privacy-policy": {
      id: "/privacy-policy";
      path: "/privacy-policy";
      fullPath: "/privacy-policy";
      preLoaderRoute: typeof PrivacyPolicyImport;
      parentRoute: typeof rootRoute;
    };
    "/conflicts": {
      id: "/conflicts";
      path: "/conflicts";
      fullPath: "/conflicts";
      preLoaderRoute: typeof ConflictsLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/connections": {
      id: "/connections";
      path: "/connections";
      fullPath: "/connections";
      preLoaderRoute: typeof ConnectionsLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/help": {
      id: "/help";
      path: "/help";
      fullPath: "/help";
      preLoaderRoute: typeof HelpLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/statements": {
      id: "/statements";
      path: "/statements";
      fullPath: "/statements";
      preLoaderRoute: typeof StatementsLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/analysis/nlp": {
      id: "/analysis/nlp";
      path: "/analysis/nlp";
      fullPath: "/analysis/nlp";
      preLoaderRoute: typeof AnalysisNlpImport;
      parentRoute: typeof rootRoute;
    };
    "/network/comp": {
      id: "/network/comp";
      path: "/network/comp";
      fullPath: "/network/comp";
      preLoaderRoute: typeof NetworkCompLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/network/statement": {
      id: "/network/statement";
      path: "/network/statement";
      fullPath: "/network/statement";
      preLoaderRoute: typeof NetworkStatementLazyImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexLazyRoute;
  "/privacy-policy": typeof PrivacyPolicyRoute;
  "/conflicts": typeof ConflictsLazyRoute;
  "/connections": typeof ConnectionsLazyRoute;
  "/help": typeof HelpLazyRoute;
  "/statements": typeof StatementsLazyRoute;
  "/analysis/nlp": typeof AnalysisNlpRoute;
  "/network/comp": typeof NetworkCompLazyRoute;
  "/network/statement": typeof NetworkStatementLazyRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexLazyRoute;
  "/privacy-policy": typeof PrivacyPolicyRoute;
  "/conflicts": typeof ConflictsLazyRoute;
  "/connections": typeof ConnectionsLazyRoute;
  "/help": typeof HelpLazyRoute;
  "/statements": typeof StatementsLazyRoute;
  "/analysis/nlp": typeof AnalysisNlpRoute;
  "/network/comp": typeof NetworkCompLazyRoute;
  "/network/statement": typeof NetworkStatementLazyRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexLazyRoute;
  "/privacy-policy": typeof PrivacyPolicyRoute;
  "/conflicts": typeof ConflictsLazyRoute;
  "/connections": typeof ConnectionsLazyRoute;
  "/help": typeof HelpLazyRoute;
  "/statements": typeof StatementsLazyRoute;
  "/analysis/nlp": typeof AnalysisNlpRoute;
  "/network/comp": typeof NetworkCompLazyRoute;
  "/network/statement": typeof NetworkStatementLazyRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/privacy-policy"
    | "/conflicts"
    | "/connections"
    | "/help"
    | "/statements"
    | "/analysis/nlp"
    | "/network/comp"
    | "/network/statement";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/privacy-policy"
    | "/conflicts"
    | "/connections"
    | "/help"
    | "/statements"
    | "/analysis/nlp"
    | "/network/comp"
    | "/network/statement";
  id:
    | "__root__"
    | "/"
    | "/privacy-policy"
    | "/conflicts"
    | "/connections"
    | "/help"
    | "/statements"
    | "/analysis/nlp"
    | "/network/comp"
    | "/network/statement";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute;
  PrivacyPolicyRoute: typeof PrivacyPolicyRoute;
  ConflictsLazyRoute: typeof ConflictsLazyRoute;
  ConnectionsLazyRoute: typeof ConnectionsLazyRoute;
  HelpLazyRoute: typeof HelpLazyRoute;
  StatementsLazyRoute: typeof StatementsLazyRoute;
  AnalysisNlpRoute: typeof AnalysisNlpRoute;
  NetworkCompLazyRoute: typeof NetworkCompLazyRoute;
  NetworkStatementLazyRoute: typeof NetworkStatementLazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  PrivacyPolicyRoute: PrivacyPolicyRoute,
  ConflictsLazyRoute: ConflictsLazyRoute,
  ConnectionsLazyRoute: ConnectionsLazyRoute,
  HelpLazyRoute: HelpLazyRoute,
  StatementsLazyRoute: StatementsLazyRoute,
  AnalysisNlpRoute: AnalysisNlpRoute,
  NetworkCompLazyRoute: NetworkCompLazyRoute,
  NetworkStatementLazyRoute: NetworkStatementLazyRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/privacy-policy",
        "/conflicts",
        "/connections",
        "/help",
        "/statements",
        "/analysis/nlp",
        "/network/comp",
        "/network/statement"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/privacy-policy": {
      "filePath": "privacy-policy.tsx"
    },
    "/conflicts": {
      "filePath": "conflicts.lazy.tsx"
    },
    "/connections": {
      "filePath": "connections.lazy.tsx"
    },
    "/help": {
      "filePath": "help.lazy.tsx"
    },
    "/statements": {
      "filePath": "statements.lazy.tsx"
    },
    "/analysis/nlp": {
      "filePath": "analysis/nlp.tsx"
    },
    "/network/comp": {
      "filePath": "network/comp.lazy.tsx"
    },
    "/network/statement": {
      "filePath": "network/statement.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
