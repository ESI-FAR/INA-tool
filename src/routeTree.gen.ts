/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as PrivacyPolicyImport } from "./routes/privacy-policy";

// Create Virtual Routes

const StatementsLazyImport = createFileRoute("/statements")();
const HelpLazyImport = createFileRoute("/help")();
const ConnectionsLazyImport = createFileRoute("/connections")();
const IndexLazyImport = createFileRoute("/")();

// Create/Update Routes

const StatementsLazyRoute = StatementsLazyImport.update({
  id: "/statements",
  path: "/statements",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/statements.lazy").then((d) => d.Route));

const HelpLazyRoute = HelpLazyImport.update({
  id: "/help",
  path: "/help",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/help.lazy").then((d) => d.Route));

const ConnectionsLazyRoute = ConnectionsLazyImport.update({
  id: "/connections",
  path: "/connections",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/connections.lazy").then((d) => d.Route));

const PrivacyPolicyRoute = PrivacyPolicyImport.update({
  id: "/privacy-policy",
  path: "/privacy-policy",
  getParentRoute: () => rootRoute,
} as any);

const IndexLazyRoute = IndexLazyImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route));

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/privacy-policy": {
      id: "/privacy-policy";
      path: "/privacy-policy";
      fullPath: "/privacy-policy";
      preLoaderRoute: typeof PrivacyPolicyImport;
      parentRoute: typeof rootRoute;
    };
    "/connections": {
      id: "/connections";
      path: "/connections";
      fullPath: "/connections";
      preLoaderRoute: typeof ConnectionsLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/help": {
      id: "/help";
      path: "/help";
      fullPath: "/help";
      preLoaderRoute: typeof HelpLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/statements": {
      id: "/statements";
      path: "/statements";
      fullPath: "/statements";
      preLoaderRoute: typeof StatementsLazyImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexLazyRoute;
  "/privacy-policy": typeof PrivacyPolicyRoute;
  "/connections": typeof ConnectionsLazyRoute;
  "/help": typeof HelpLazyRoute;
  "/statements": typeof StatementsLazyRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexLazyRoute;
  "/privacy-policy": typeof PrivacyPolicyRoute;
  "/connections": typeof ConnectionsLazyRoute;
  "/help": typeof HelpLazyRoute;
  "/statements": typeof StatementsLazyRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexLazyRoute;
  "/privacy-policy": typeof PrivacyPolicyRoute;
  "/connections": typeof ConnectionsLazyRoute;
  "/help": typeof HelpLazyRoute;
  "/statements": typeof StatementsLazyRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/privacy-policy" | "/connections" | "/help" | "/statements";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/privacy-policy" | "/connections" | "/help" | "/statements";
  id:
    | "__root__"
    | "/"
    | "/privacy-policy"
    | "/connections"
    | "/help"
    | "/statements";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute;
  PrivacyPolicyRoute: typeof PrivacyPolicyRoute;
  ConnectionsLazyRoute: typeof ConnectionsLazyRoute;
  HelpLazyRoute: typeof HelpLazyRoute;
  StatementsLazyRoute: typeof StatementsLazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  PrivacyPolicyRoute: PrivacyPolicyRoute,
  ConnectionsLazyRoute: ConnectionsLazyRoute,
  HelpLazyRoute: HelpLazyRoute,
  StatementsLazyRoute: StatementsLazyRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/privacy-policy",
        "/connections",
        "/help",
        "/statements"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/privacy-policy": {
      "filePath": "privacy-policy.tsx"
    },
    "/connections": {
      "filePath": "connections.lazy.tsx"
    },
    "/help": {
      "filePath": "help.lazy.tsx"
    },
    "/statements": {
      "filePath": "statements.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
