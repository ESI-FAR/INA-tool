/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PrivacyPolicyImport } from './routes/privacy-policy'
import { Route as AnalysisProposeConnectionsImport } from './routes/analysis/propose-connections'

// Create Virtual Routes

const StatementsLazyImport = createFileRoute('/statements')()
const HelpLazyImport = createFileRoute('/help')()
const ConflictsLazyImport = createFileRoute('/conflicts')()
const IndexLazyImport = createFileRoute('/')()
const ConnectionsIndexLazyImport = createFileRoute('/connections/')()
const NetworkStatementLazyImport = createFileRoute('/network/statement')()
const NetworkCompLazyImport = createFileRoute('/network/comp')()
const ConnectionsStatementLazyImport = createFileRoute(
  '/connections/$statement',
)()
const AnalysisMetricsLazyImport = createFileRoute('/analysis/metrics')()

// Create/Update Routes

const StatementsLazyRoute = StatementsLazyImport.update({
  id: '/statements',
  path: '/statements',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/statements.lazy').then((d) => d.Route))

const HelpLazyRoute = HelpLazyImport.update({
  id: '/help',
  path: '/help',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/help.lazy').then((d) => d.Route))

const ConflictsLazyRoute = ConflictsLazyImport.update({
  id: '/conflicts',
  path: '/conflicts',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/conflicts.lazy').then((d) => d.Route))

const PrivacyPolicyRoute = PrivacyPolicyImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ConnectionsIndexLazyRoute = ConnectionsIndexLazyImport.update({
  id: '/connections/',
  path: '/connections/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/connections/index.lazy').then((d) => d.Route),
)

const NetworkStatementLazyRoute = NetworkStatementLazyImport.update({
  id: '/network/statement',
  path: '/network/statement',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/network/statement.lazy').then((d) => d.Route),
)

const NetworkCompLazyRoute = NetworkCompLazyImport.update({
  id: '/network/comp',
  path: '/network/comp',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/network/comp.lazy').then((d) => d.Route))

const ConnectionsStatementLazyRoute = ConnectionsStatementLazyImport.update({
  id: '/connections/$statement',
  path: '/connections/$statement',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/connections/$statement.lazy').then((d) => d.Route),
)

const AnalysisMetricsLazyRoute = AnalysisMetricsLazyImport.update({
  id: '/analysis/metrics',
  path: '/analysis/metrics',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/analysis/metrics.lazy').then((d) => d.Route),
)

const AnalysisProposeConnectionsRoute = AnalysisProposeConnectionsImport.update(
  {
    id: '/analysis/propose-connections',
    path: '/analysis/propose-connections',
    getParentRoute: () => rootRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/privacy-policy': {
      id: '/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PrivacyPolicyImport
      parentRoute: typeof rootRoute
    }
    '/conflicts': {
      id: '/conflicts'
      path: '/conflicts'
      fullPath: '/conflicts'
      preLoaderRoute: typeof ConflictsLazyImport
      parentRoute: typeof rootRoute
    }
    '/help': {
      id: '/help'
      path: '/help'
      fullPath: '/help'
      preLoaderRoute: typeof HelpLazyImport
      parentRoute: typeof rootRoute
    }
    '/statements': {
      id: '/statements'
      path: '/statements'
      fullPath: '/statements'
      preLoaderRoute: typeof StatementsLazyImport
      parentRoute: typeof rootRoute
    }
    '/analysis/propose-connections': {
      id: '/analysis/propose-connections'
      path: '/analysis/propose-connections'
      fullPath: '/analysis/propose-connections'
      preLoaderRoute: typeof AnalysisProposeConnectionsImport
      parentRoute: typeof rootRoute
    }
    '/analysis/metrics': {
      id: '/analysis/metrics'
      path: '/analysis/metrics'
      fullPath: '/analysis/metrics'
      preLoaderRoute: typeof AnalysisMetricsLazyImport
      parentRoute: typeof rootRoute
    }
    '/connections/$statement': {
      id: '/connections/$statement'
      path: '/connections/$statement'
      fullPath: '/connections/$statement'
      preLoaderRoute: typeof ConnectionsStatementLazyImport
      parentRoute: typeof rootRoute
    }
    '/network/comp': {
      id: '/network/comp'
      path: '/network/comp'
      fullPath: '/network/comp'
      preLoaderRoute: typeof NetworkCompLazyImport
      parentRoute: typeof rootRoute
    }
    '/network/statement': {
      id: '/network/statement'
      path: '/network/statement'
      fullPath: '/network/statement'
      preLoaderRoute: typeof NetworkStatementLazyImport
      parentRoute: typeof rootRoute
    }
    '/connections/': {
      id: '/connections/'
      path: '/connections'
      fullPath: '/connections'
      preLoaderRoute: typeof ConnectionsIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/conflicts': typeof ConflictsLazyRoute
  '/help': typeof HelpLazyRoute
  '/statements': typeof StatementsLazyRoute
  '/analysis/propose-connections': typeof AnalysisProposeConnectionsRoute
  '/analysis/metrics': typeof AnalysisMetricsLazyRoute
  '/connections/$statement': typeof ConnectionsStatementLazyRoute
  '/network/comp': typeof NetworkCompLazyRoute
  '/network/statement': typeof NetworkStatementLazyRoute
  '/connections': typeof ConnectionsIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/conflicts': typeof ConflictsLazyRoute
  '/help': typeof HelpLazyRoute
  '/statements': typeof StatementsLazyRoute
  '/analysis/propose-connections': typeof AnalysisProposeConnectionsRoute
  '/analysis/metrics': typeof AnalysisMetricsLazyRoute
  '/connections/$statement': typeof ConnectionsStatementLazyRoute
  '/network/comp': typeof NetworkCompLazyRoute
  '/network/statement': typeof NetworkStatementLazyRoute
  '/connections': typeof ConnectionsIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/conflicts': typeof ConflictsLazyRoute
  '/help': typeof HelpLazyRoute
  '/statements': typeof StatementsLazyRoute
  '/analysis/propose-connections': typeof AnalysisProposeConnectionsRoute
  '/analysis/metrics': typeof AnalysisMetricsLazyRoute
  '/connections/$statement': typeof ConnectionsStatementLazyRoute
  '/network/comp': typeof NetworkCompLazyRoute
  '/network/statement': typeof NetworkStatementLazyRoute
  '/connections/': typeof ConnectionsIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/privacy-policy'
    | '/conflicts'
    | '/help'
    | '/statements'
    | '/analysis/propose-connections'
    | '/analysis/metrics'
    | '/connections/$statement'
    | '/network/comp'
    | '/network/statement'
    | '/connections'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/privacy-policy'
    | '/conflicts'
    | '/help'
    | '/statements'
    | '/analysis/propose-connections'
    | '/analysis/metrics'
    | '/connections/$statement'
    | '/network/comp'
    | '/network/statement'
    | '/connections'
  id:
    | '__root__'
    | '/'
    | '/privacy-policy'
    | '/conflicts'
    | '/help'
    | '/statements'
    | '/analysis/propose-connections'
    | '/analysis/metrics'
    | '/connections/$statement'
    | '/network/comp'
    | '/network/statement'
    | '/connections/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  PrivacyPolicyRoute: typeof PrivacyPolicyRoute
  ConflictsLazyRoute: typeof ConflictsLazyRoute
  HelpLazyRoute: typeof HelpLazyRoute
  StatementsLazyRoute: typeof StatementsLazyRoute
  AnalysisProposeConnectionsRoute: typeof AnalysisProposeConnectionsRoute
  AnalysisMetricsLazyRoute: typeof AnalysisMetricsLazyRoute
  ConnectionsStatementLazyRoute: typeof ConnectionsStatementLazyRoute
  NetworkCompLazyRoute: typeof NetworkCompLazyRoute
  NetworkStatementLazyRoute: typeof NetworkStatementLazyRoute
  ConnectionsIndexLazyRoute: typeof ConnectionsIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  PrivacyPolicyRoute: PrivacyPolicyRoute,
  ConflictsLazyRoute: ConflictsLazyRoute,
  HelpLazyRoute: HelpLazyRoute,
  StatementsLazyRoute: StatementsLazyRoute,
  AnalysisProposeConnectionsRoute: AnalysisProposeConnectionsRoute,
  AnalysisMetricsLazyRoute: AnalysisMetricsLazyRoute,
  ConnectionsStatementLazyRoute: ConnectionsStatementLazyRoute,
  NetworkCompLazyRoute: NetworkCompLazyRoute,
  NetworkStatementLazyRoute: NetworkStatementLazyRoute,
  ConnectionsIndexLazyRoute: ConnectionsIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/privacy-policy",
        "/conflicts",
        "/help",
        "/statements",
        "/analysis/propose-connections",
        "/analysis/metrics",
        "/connections/$statement",
        "/network/comp",
        "/network/statement",
        "/connections/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/privacy-policy": {
      "filePath": "privacy-policy.tsx"
    },
    "/conflicts": {
      "filePath": "conflicts.lazy.tsx"
    },
    "/help": {
      "filePath": "help.lazy.tsx"
    },
    "/statements": {
      "filePath": "statements.lazy.tsx"
    },
    "/analysis/propose-connections": {
      "filePath": "analysis/propose-connections.tsx"
    },
    "/analysis/metrics": {
      "filePath": "analysis/metrics.lazy.tsx"
    },
    "/connections/$statement": {
      "filePath": "connections/$statement.lazy.tsx"
    },
    "/network/comp": {
      "filePath": "network/comp.lazy.tsx"
    },
    "/network/statement": {
      "filePath": "network/statement.lazy.tsx"
    },
    "/connections/": {
      "filePath": "connections/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
